1.  Clone a project

    git clone https://github.com/lokesh-ns/git-and-github-for-devops.git

2.  Someone has made a few changes in the code and asked me to pull those changes. What should I do?

    git pull origin master

3.  I have modified the code and added changes. How do I commit my changes?

    git add .
    git commit -m "adding git guide file"

4.  I want only some of my files added instead of all changes?
	
	git add demo.py .\Git-Guide.txt
	
5.	To unstage a tracked file use the below command
	
	git reset <file>
	
6.	I have modified/formatted some code while going through it. Now I want the code to be back to the state as it was.

	git reset --hard < required specific commit>
	(This is destructive command, once after pointing to a required commit, the commits which were made prior to this 
	will be no longer part of your branch. So make sure to stash before running this command )
	
7.	I have committed my changes. How can I undo my change?
	
	You can undo the commit by resetting the HEAD. If you just want to undo the commit but let the
	changes be present then use the soft attribute else if you do want the commit along with the
	changes then use the hard attribute
	
	git reset --soft HEAD~1 (undo with changes preserved)
	git reset --hard HEAD~1 (undo with changes removed)
	
8.	Undo the changes of an modified file (the file is not added or commited)
	
	git chekout -- <file_name>
	
9.	I have made some changes to the branch. Also, I wanted to pull the new
	changes. But it is not working.
	
	The command git pull may not work if the changes are done by someone else to the same files
	which you have also modified.
	Stash the changes git stash save <name of the change> -u  
	Pull the changes now git pull
	Retrieve the changes git stash apply <n>
	where n is the stash number. To get the list of stashes git stash list
	
	example: 	git stash save "mychanges1" -u
				git stash apply 0

10. I have made some code changes. But I want to commit to a new separate branch.					
	
	Create a new branch, git branch <my-branch-name>
	To switch to new branch, git switch <my-branch-name> OR git checkout <my-branch-name>
	Stage all the changes using, git add *
	Commit the changes git commit -m "<some commit message>"
	
	* To delete a branch, git branch -d <branch_name>
	
11.	I just committed but forgot to add a few files to the commit. Is there a way
	to update the same commit with some modifications?
	
	Yes. You can update the commit by amending your changes.
	
	To add files git add <file-name> <file-name> ...
	
	To update the commit git commit --amend --no-edit
	
	To update with new commit message git commit --amend -m 'My new commit message' 
	(This command can also be used to update previous commit message without any code modifications)
	
	--no-edit is used to avoid the prompt to edit commit message. If you wanna modify commit
	message as well, during commit update, then do not include -m along with your commit message
	
	The amend updates the previous commit without creating a new one on top of the previous.
	(In reality, Git discards the previous commit and replaces it with a new commit)
	
12.	I want to rename my local and remote branches. How can I do it?
	
	To rename a branch, checkout to the branch and rename it.
	
	Check out other branch, git checkout <your-branch-name>
	Rename your branch, git branch -m <new-branch-name>
	Push to remote, git push <remote> :<your-branch> <new-branch-name>
	Set upstream, git push <remote> -u <new-branch-name>
	
13.	I have made some changes to the code on the branch on which all of the
	developers are working. How can I publish my changes?
	
	To move the changes from your local machine to remote (EX: origin), follow the below steps in your terminal
	
	Stage the files git add *
	Commit the changes git commit -m "<some commit message>"
	Push the changes git push
	
14.	I created a commit and also pushed it to master. Is it possible to update that commit now?

	Yes. You can update the commit even after it is pushed. Everything will follow as mentioned in the
	previous question, but you will have to force push.
	
	git add <file-name> <file-name> ...
	git commit --amend --no-edit or git commit --amend
	git push -f or git push --force



